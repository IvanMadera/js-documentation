(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{481:function(t,e,s){"use strict";s.r(e);var a=s(83),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"while-statement"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#while-statement"}},[t._v("#")]),t._v(" while statement")]),t._v(" "),s("p",[t._v("A while statement executes its statements as long as a specified condition evaluates to true. A while statement looks as follows:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("condition"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" statement\n")])])]),s("p",[t._v("If the condition becomes false, statement within the loop stops executing and control passes to the statement following the loop.\nThe condition test occurs before statement in the loop is executed. If the condition returns true, statement is executed and the condition is tested again. If the condition returns false, execution stops and control is passed to the statement following while.")]),t._v(" "),s("p",[t._v("To execute multiple statements, use a block statement ({ ... }) to group those statements.")]),t._v(" "),s("p",[t._v("Example:\nThe following while loop iterates as long as n is less than three:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("With each iteration, the loop increments n and adds that value to x. Therefore, x and n take on the following values:")]),t._v(" "),s("ul",[s("li",[t._v("After the first pass: n = 1 and x = 1")]),t._v(" "),s("li",[t._v("After the second pass: n = 2 and x = 3")]),t._v(" "),s("li",[t._v("After the third pass: n = 3 and x = 6")])]),t._v(" "),s("p",[t._v("After completing the third pass, the condition n < 3 is no longer true, so the loop terminates.")])])}),[],!1,null,null,null);e.default=n.exports}}]);